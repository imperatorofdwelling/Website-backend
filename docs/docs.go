// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/card/save": {
            "post": {
                "description": "Saves a refillable card's information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Card"
                ],
                "summary": "Save Refillable Card",
                "parameters": [
                    {
                        "description": "Card information",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoints.SaveCard"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/endpoints.SaveCardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/endpoints.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/endpoints.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payload/create": {
            "post": {
                "description": "Handles the payout process to a user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payload"
                ],
                "summary": "Make Payout",
                "parameters": [
                    {
                        "description": "Payout details",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoints.PayoutRequestEndpoint"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/endpoints.PayloadAnswer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/endpoints.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/endpoints.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payment/create": {
            "post": {
                "description": "Handles the payment process, including reading the request, making the API call, and responding to the frontend.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a new payment",
                "parameters": [
                    {
                        "description": "Payment request details",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoints.Create"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/endpoints.PaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/endpoints.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/endpoints.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "endpoints.Amount": {
            "type": "object",
            "properties": {
                "currency": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "endpoints.ConfirmationResponse": {
            "type": "object",
            "properties": {
                "confirmation_token": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "endpoints.Create": {
            "type": "object",
            "properties": {
                "amount": {
                    "$ref": "#/definitions/endpoints.Amount"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "endpoints.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "endpoints.PayloadAnswer": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/metrics.Status"
                },
                "transaction_id": {
                    "type": "string"
                },
                "you_kassa_payload_model": {
                    "$ref": "#/definitions/endpoints.YooKassaPayloadModel"
                }
            }
        },
        "endpoints.PaymentResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "$ref": "#/definitions/endpoints.Amount"
                },
                "confirmation": {
                    "$ref": "#/definitions/endpoints.ConfirmationResponse"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {},
                "paid": {
                    "type": "boolean"
                },
                "recipient": {
                    "$ref": "#/definitions/endpoints.Recipient"
                },
                "refundable": {
                    "type": "boolean"
                },
                "status": {
                    "$ref": "#/definitions/metrics.Status"
                },
                "test": {
                    "type": "boolean"
                }
            }
        },
        "endpoints.PayoutRequestEndpoint": {
            "type": "object",
            "properties": {
                "amount": {
                    "$ref": "#/definitions/endpoints.Amount"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "endpoints.Recipient": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "gateway_id": {
                    "type": "string"
                }
            }
        },
        "endpoints.SaveCard": {
            "type": "object",
            "properties": {
                "first_six": {
                    "type": "string"
                },
                "last_four": {
                    "type": "string"
                },
                "synonym": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "endpoints.SaveCardResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/metrics.Status"
                }
            }
        },
        "endpoints.YooKassaPayloadModel": {
            "type": "object",
            "properties": {
                "amount": {
                    "$ref": "#/definitions/endpoints.Amount"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/metrics.Status"
                },
                "test": {
                    "type": "boolean"
                }
            }
        },
        "metrics.Status": {
            "type": "string",
            "enum": [
                "succeeded",
                "canceled",
                "waiting_for_capture",
                "pending"
            ],
            "x-enum-varnames": [
                "Succeeded",
                "Canceled",
                "WaitingForCapture",
                "Pending"
            ]
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Imperator Of Dwelling Payment System",
	Description:      "Payment System for Imperator Of Dwelling written on Golang",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
